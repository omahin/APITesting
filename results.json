{
  "collection": {
    "_": {
      "postman_id": "bab5c654-685c-4c5e-b70c-df9f8f28c433",
      "exporter_id": "17052005"
    },
    "item": [
      {
        "id": "040ed895-c349-42b8-ad63-55d9bf1ba05a",
        "name": "/v1/public/characters",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "public",
              "characters"
            ],
            "host": [
              "gateway",
              "marvel",
              "com"
            ],
            "query": [
              {
                "key": "apikey",
                "value": "{{publicKey}}"
              },
              {
                "key": "ts",
                "value": "{{ts}}"
              },
              {
                "key": "hash",
                "value": "{{hash}}"
              }
            ],
            "variable": []
          },
          "method": "GET",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "header",
                "key": "in"
              },
              {
                "type": "string",
                "value": "api_key",
                "key": "key"
              },
              {
                "type": "string",
                "value": "a511e6d2d12e605782b9d48d738406e774f1b79b",
                "key": "value"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "110b9590-8824-420d-91ac-d6b228043753",
              "type": "text/javascript",
              "exec": [
                "// Gerar timestamp\r",
                "const ts = new Date().getTime();\r",
                "pm.environment.set(\"ts\", ts);\r",
                "\r",
                "// Pegar chaves pública e privada\r",
                "const publicKey = pm.environment.get(\"publicKey\");\r",
                "const privateKey = pm.environment.get(\"privateKey\");\r",
                "\r",
                "// Gerar hash\r",
                "const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();\r",
                "pm.environment.set(\"hash\", hash);\r",
                ""
              ],
              "_lastExecutionId": "3fc2d6ad-4955-4272-8908-94e756ee17f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a637b491-959d-4631-a027-d0bff4d505d7",
              "type": "text/javascript",
              "exec": [
                "pm.test('Successful GET request', function () {\r",
                "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                "})\r",
                "\r",
                "pm.test('Body matches string 3-D', function () {\r",
                "    pm.expect(pm.response.text()).to.include('3-D Man');\r",
                "})\r",
                "\r",
                "pm.test('Response time is less than 300ms', function () {\r",
                "    pm.expect(pm.response.responseTime).to.be.above(300);\r",
                "})\r",
                "\r",
                "pm.test('Content-Type is present', function () {\r",
                "    pm.response.to.have.header('Content-Type');\r",
                "})\r",
                "\r",
                "pm.test('Content-Type is JSON', function () {\r",
                "    pm.response.to.be.json;\r",
                "})\r",
                "\r",
                "pm.test(\"response is ok\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "let jsonResponse = pm.response.json();\r",
                "\r",
                "pm.test(\"Response should be a parsable JSON\", function() {\r",
                "    pm.expect(jsonResponse).to.be.ok;\r",
                "});\r",
                "\r",
                "pm.test(\"Response body should be an object\", function() {\r",
                "    pm.expect(jsonResponse).to.be.an('object');\r",
                "});\r",
                "\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "2ad28f8c-eb20-4bb4-94b3-ffe9f926dca8"
            }
          }
        ]
      }
    ],
    "auth": {
      "type": "apikey",
      "apikey": [
        {
          "type": "string",
          "value": "",
          "key": "value"
        },
        {
          "type": "string",
          "value": "",
          "key": "key"
        },
        {
          "type": "string",
          "value": "query",
          "key": "in"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "687ce36f-85da-4bce-812e-92dc8ea996df",
          "type": "text/javascript",
          "exec": [
            "// Gera timestamp",
            "const ts = new Date().getTime();",
            "pm.environment.set(\"ts\", ts);",
            "",
            "// Pega chaves pública e privada",
            "const publicKey = pm.environment.get(\"publicKey\");",
            "const privateKey = pm.environment.get(\"privateKey\");",
            "",
            "// Gera hash",
            "const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();",
            "pm.environment.set(\"hash\", hash);",
            ""
          ],
          "_lastExecutionId": "40d1e250-2fa8-4c7a-af67-a14dedad3b65"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "b7273c72-ffbd-42d5-9500-fce65b454254",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "4f94f2f5-7c96-45ff-a692-bcb3b448e6ed"
        }
      }
    ],
    "variable": [],
    "info": {
      "_postman_id": "bab5c654-685c-4c5e-b70c-df9f8f28c433",
      "name": "Marvel API Test",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "80d463bf-5ffe-43db-aa98-2399cd2a4337",
    "values": [
      {
        "type": "any",
        "value": 1720203038136,
        "key": "ts"
      },
      {
        "type": "any",
        "value": "d41d8cd98f00b204e9800998ecf8427e",
        "key": "hash"
      }
    ]
  },
  "globals": {
    "id": "a4adc66a-877c-4e96-b8e0-b95c6e450d52",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 8,
        "pending": 0,
        "failed": 3
      },
      "testScripts": {
        "total": 2,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 2,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 675,
      "responseMin": 675,
      "responseMax": 675,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1720203038109,
      "completed": 1720203038861
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ffa4c9c3-dce0-4dc5-9315-63e20dfb45da",
          "httpRequestId": "e6d8641e-3dab-48c9-b34f-3f5ec13ca4ed"
        },
        "item": {
          "id": "040ed895-c349-42b8-ad63-55d9bf1ba05a",
          "name": "/v1/public/characters",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "v1",
                "public",
                "characters"
              ],
              "host": [
                "gateway",
                "marvel",
                "com"
              ],
              "query": [
                {
                  "key": "apikey",
                  "value": "{{publicKey}}"
                },
                {
                  "key": "ts",
                  "value": "{{ts}}"
                },
                {
                  "key": "hash",
                  "value": "{{hash}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "header",
                  "key": "in"
                },
                {
                  "type": "string",
                  "value": "api_key",
                  "key": "key"
                },
                {
                  "type": "string",
                  "value": "a511e6d2d12e605782b9d48d738406e774f1b79b",
                  "key": "value"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "110b9590-8824-420d-91ac-d6b228043753",
                "type": "text/javascript",
                "exec": [
                  "// Gerar timestamp\r",
                  "const ts = new Date().getTime();\r",
                  "pm.environment.set(\"ts\", ts);\r",
                  "\r",
                  "// Pegar chaves pública e privada\r",
                  "const publicKey = pm.environment.get(\"publicKey\");\r",
                  "const privateKey = pm.environment.get(\"privateKey\");\r",
                  "\r",
                  "// Gerar hash\r",
                  "const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();\r",
                  "pm.environment.set(\"hash\", hash);\r",
                  ""
                ],
                "_lastExecutionId": "3fc2d6ad-4955-4272-8908-94e756ee17f8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a637b491-959d-4631-a027-d0bff4d505d7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Successful GET request', function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "})\r",
                  "\r",
                  "pm.test('Body matches string 3-D', function () {\r",
                  "    pm.expect(pm.response.text()).to.include('3-D Man');\r",
                  "})\r",
                  "\r",
                  "pm.test('Response time is less than 300ms', function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.above(300);\r",
                  "})\r",
                  "\r",
                  "pm.test('Content-Type is present', function () {\r",
                  "    pm.response.to.have.header('Content-Type');\r",
                  "})\r",
                  "\r",
                  "pm.test('Content-Type is JSON', function () {\r",
                  "    pm.response.to.be.json;\r",
                  "})\r",
                  "\r",
                  "pm.test(\"response is ok\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "let jsonResponse = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response should be a parsable JSON\", function() {\r",
                  "    pm.expect(jsonResponse).to.be.ok;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response body should be an object\", function() {\r",
                  "    pm.expect(jsonResponse).to.be.an('object');\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "2ad28f8c-eb20-4bb4-94b3-ffe9f926dca8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "v1",
              "public",
              "characters"
            ],
            "host": [
              "gateway",
              "marvel",
              "com"
            ],
            "query": [
              {
                "key": "apikey",
                "value": "{{publicKey}}"
              },
              {
                "key": "ts",
                "value": "1720203038136"
              },
              {
                "key": "hash",
                "value": "d41d8cd98f00b204e9800998ecf8427e"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "api_key",
              "value": "a511e6d2d12e605782b9d48d738406e774f1b79b",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6eb9d1c9-9bc2-45db-84e9-3a7c776294ee",
              "system": true
            },
            {
              "key": "Host",
              "value": "gateway.marvel.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "header",
                "key": "in"
              },
              {
                "type": "string",
                "value": "api_key",
                "key": "key"
              },
              {
                "type": "string",
                "value": "a511e6d2d12e605782b9d48d738406e774f1b79b",
                "key": "value"
              }
            ]
          }
        },
        "response": {
          "id": "b47744e7-bc5e-4685-bf44-1886e0751ffc",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Fri, 05 Jul 2024 18:24:44 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              67,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              101,
              100,
              32,
              65,
              80,
              73,
              32,
              107,
              101,
              121,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 675,
          "responseSize": 72
        },
        "id": "040ed895-c349-42b8-ad63-55d9bf1ba05a",
        "assertions": [
          {
            "assertion": "Successful GET request",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Successful GET request",
              "message": "expected 401 to be one of [ 200 ]",
              "stack": "AssertionError: expected 401 to be one of [ 200 ]\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Body matches string 3-D",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Body matches string 3-D",
              "message": "expected '{\"code\":\"InvalidCredentials\",\"message…' to include '3-D Man'",
              "stack": "AssertionError: expected '{\"code\":\"InvalidCredentials\",\"message…' to include '3-D Man'\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Response time is less than 300ms",
            "skipped": false
          },
          {
            "assertion": "Content-Type is present",
            "skipped": false
          },
          {
            "assertion": "Content-Type is JSON",
            "skipped": false
          },
          {
            "assertion": "response is ok",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "response is ok",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:6:1)"
            }
          },
          {
            "assertion": "Response should be a parsable JSON",
            "skipped": false
          },
          {
            "assertion": "Response body should be an object",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 72
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Successful GET request",
          "message": "expected 401 to be one of [ 200 ]",
          "stack": "AssertionError: expected 401 to be one of [ 200 ]\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "4dca3f8f353425284ea3969cd6df5d58",
          "id": "8bcd8ae6-3022-4c39-8c77-11827f07b10e",
          "timestamp": 1720203038842,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "040ed895-c349-42b8-ad63-55d9bf1ba05a",
          "name": "/v1/public/characters",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "v1",
                "public",
                "characters"
              ],
              "host": [
                "gateway",
                "marvel",
                "com"
              ],
              "query": [
                {
                  "key": "apikey",
                  "value": "{{publicKey}}"
                },
                {
                  "key": "ts",
                  "value": "{{ts}}"
                },
                {
                  "key": "hash",
                  "value": "{{hash}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "header",
                  "key": "in"
                },
                {
                  "type": "string",
                  "value": "api_key",
                  "key": "key"
                },
                {
                  "type": "string",
                  "value": "a511e6d2d12e605782b9d48d738406e774f1b79b",
                  "key": "value"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "110b9590-8824-420d-91ac-d6b228043753",
                "type": "text/javascript",
                "exec": [
                  "// Gerar timestamp\r",
                  "const ts = new Date().getTime();\r",
                  "pm.environment.set(\"ts\", ts);\r",
                  "\r",
                  "// Pegar chaves pública e privada\r",
                  "const publicKey = pm.environment.get(\"publicKey\");\r",
                  "const privateKey = pm.environment.get(\"privateKey\");\r",
                  "\r",
                  "// Gerar hash\r",
                  "const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();\r",
                  "pm.environment.set(\"hash\", hash);\r",
                  ""
                ],
                "_lastExecutionId": "3fc2d6ad-4955-4272-8908-94e756ee17f8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a637b491-959d-4631-a027-d0bff4d505d7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Successful GET request', function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "})\r",
                  "\r",
                  "pm.test('Body matches string 3-D', function () {\r",
                  "    pm.expect(pm.response.text()).to.include('3-D Man');\r",
                  "})\r",
                  "\r",
                  "pm.test('Response time is less than 300ms', function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.above(300);\r",
                  "})\r",
                  "\r",
                  "pm.test('Content-Type is present', function () {\r",
                  "    pm.response.to.have.header('Content-Type');\r",
                  "})\r",
                  "\r",
                  "pm.test('Content-Type is JSON', function () {\r",
                  "    pm.response.to.be.json;\r",
                  "})\r",
                  "\r",
                  "pm.test(\"response is ok\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "let jsonResponse = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response should be a parsable JSON\", function() {\r",
                  "    pm.expect(jsonResponse).to.be.ok;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response body should be an object\", function() {\r",
                  "    pm.expect(jsonResponse).to.be.an('object');\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "2ad28f8c-eb20-4bb4-94b3-ffe9f926dca8"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "bab5c654-685c-4c5e-b70c-df9f8f28c433",
            "exporter_id": "17052005"
          },
          "item": [
            {
              "id": "040ed895-c349-42b8-ad63-55d9bf1ba05a",
              "name": "/v1/public/characters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "v1",
                    "public",
                    "characters"
                  ],
                  "host": [
                    "gateway",
                    "marvel",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{publicKey}}"
                    },
                    {
                      "key": "ts",
                      "value": "{{ts}}"
                    },
                    {
                      "key": "hash",
                      "value": "{{hash}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "api_key",
                      "key": "key"
                    },
                    {
                      "type": "string",
                      "value": "a511e6d2d12e605782b9d48d738406e774f1b79b",
                      "key": "value"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "110b9590-8824-420d-91ac-d6b228043753",
                    "type": "text/javascript",
                    "exec": [
                      "// Gerar timestamp\r",
                      "const ts = new Date().getTime();\r",
                      "pm.environment.set(\"ts\", ts);\r",
                      "\r",
                      "// Pegar chaves pública e privada\r",
                      "const publicKey = pm.environment.get(\"publicKey\");\r",
                      "const privateKey = pm.environment.get(\"privateKey\");\r",
                      "\r",
                      "// Gerar hash\r",
                      "const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();\r",
                      "pm.environment.set(\"hash\", hash);\r",
                      ""
                    ],
                    "_lastExecutionId": "3fc2d6ad-4955-4272-8908-94e756ee17f8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a637b491-959d-4631-a027-d0bff4d505d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Successful GET request', function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                      "})\r",
                      "\r",
                      "pm.test('Body matches string 3-D', function () {\r",
                      "    pm.expect(pm.response.text()).to.include('3-D Man');\r",
                      "})\r",
                      "\r",
                      "pm.test('Response time is less than 300ms', function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.above(300);\r",
                      "})\r",
                      "\r",
                      "pm.test('Content-Type is present', function () {\r",
                      "    pm.response.to.have.header('Content-Type');\r",
                      "})\r",
                      "\r",
                      "pm.test('Content-Type is JSON', function () {\r",
                      "    pm.response.to.be.json;\r",
                      "})\r",
                      "\r",
                      "pm.test(\"response is ok\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let jsonResponse = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response should be a parsable JSON\", function() {\r",
                      "    pm.expect(jsonResponse).to.be.ok;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body should be an object\", function() {\r",
                      "    pm.expect(jsonResponse).to.be.an('object');\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "2ad28f8c-eb20-4bb4-94b3-ffe9f926dca8"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "",
                "key": "value"
              },
              {
                "type": "string",
                "value": "",
                "key": "key"
              },
              {
                "type": "string",
                "value": "query",
                "key": "in"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "687ce36f-85da-4bce-812e-92dc8ea996df",
                "type": "text/javascript",
                "exec": [
                  "// Gera timestamp",
                  "const ts = new Date().getTime();",
                  "pm.environment.set(\"ts\", ts);",
                  "",
                  "// Pega chaves pública e privada",
                  "const publicKey = pm.environment.get(\"publicKey\");",
                  "const privateKey = pm.environment.get(\"privateKey\");",
                  "",
                  "// Gera hash",
                  "const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();",
                  "pm.environment.set(\"hash\", hash);",
                  ""
                ],
                "_lastExecutionId": "40d1e250-2fa8-4c7a-af67-a14dedad3b65"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b7273c72-ffbd-42d5-9500-fce65b454254",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f94f2f5-7c96-45ff-a692-bcb3b448e6ed"
              }
            }
          ],
          "variable": [],
          "info": {
            "_postman_id": "bab5c654-685c-4c5e-b70c-df9f8f28c433",
            "name": "Marvel API Test",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ffa4c9c3-dce0-4dc5-9315-63e20dfb45da",
          "httpRequestId": "e6d8641e-3dab-48c9-b34f-3f5ec13ca4ed",
          "scriptId": "a637b491-959d-4631-a027-d0bff4d505d7",
          "execution": "2ad28f8c-eb20-4bb4-94b3-ffe9f926dca8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Body matches string 3-D",
          "message": "expected '{\"code\":\"InvalidCredentials\",\"message…' to include '3-D Man'",
          "stack": "AssertionError: expected '{\"code\":\"InvalidCredentials\",\"message…' to include '3-D Man'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "f65859ccfa60ea6e66ad0aeb96747c23",
          "id": "056edea7-4bb5-4aac-88e0-100e3644be4d",
          "timestamp": 1720203038847,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "040ed895-c349-42b8-ad63-55d9bf1ba05a",
          "name": "/v1/public/characters",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "v1",
                "public",
                "characters"
              ],
              "host": [
                "gateway",
                "marvel",
                "com"
              ],
              "query": [
                {
                  "key": "apikey",
                  "value": "{{publicKey}}"
                },
                {
                  "key": "ts",
                  "value": "{{ts}}"
                },
                {
                  "key": "hash",
                  "value": "{{hash}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "header",
                  "key": "in"
                },
                {
                  "type": "string",
                  "value": "api_key",
                  "key": "key"
                },
                {
                  "type": "string",
                  "value": "a511e6d2d12e605782b9d48d738406e774f1b79b",
                  "key": "value"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "110b9590-8824-420d-91ac-d6b228043753",
                "type": "text/javascript",
                "exec": [
                  "// Gerar timestamp\r",
                  "const ts = new Date().getTime();\r",
                  "pm.environment.set(\"ts\", ts);\r",
                  "\r",
                  "// Pegar chaves pública e privada\r",
                  "const publicKey = pm.environment.get(\"publicKey\");\r",
                  "const privateKey = pm.environment.get(\"privateKey\");\r",
                  "\r",
                  "// Gerar hash\r",
                  "const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();\r",
                  "pm.environment.set(\"hash\", hash);\r",
                  ""
                ],
                "_lastExecutionId": "3fc2d6ad-4955-4272-8908-94e756ee17f8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a637b491-959d-4631-a027-d0bff4d505d7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Successful GET request', function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "})\r",
                  "\r",
                  "pm.test('Body matches string 3-D', function () {\r",
                  "    pm.expect(pm.response.text()).to.include('3-D Man');\r",
                  "})\r",
                  "\r",
                  "pm.test('Response time is less than 300ms', function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.above(300);\r",
                  "})\r",
                  "\r",
                  "pm.test('Content-Type is present', function () {\r",
                  "    pm.response.to.have.header('Content-Type');\r",
                  "})\r",
                  "\r",
                  "pm.test('Content-Type is JSON', function () {\r",
                  "    pm.response.to.be.json;\r",
                  "})\r",
                  "\r",
                  "pm.test(\"response is ok\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "let jsonResponse = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response should be a parsable JSON\", function() {\r",
                  "    pm.expect(jsonResponse).to.be.ok;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response body should be an object\", function() {\r",
                  "    pm.expect(jsonResponse).to.be.an('object');\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "2ad28f8c-eb20-4bb4-94b3-ffe9f926dca8"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "bab5c654-685c-4c5e-b70c-df9f8f28c433",
            "exporter_id": "17052005"
          },
          "item": [
            {
              "id": "040ed895-c349-42b8-ad63-55d9bf1ba05a",
              "name": "/v1/public/characters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "v1",
                    "public",
                    "characters"
                  ],
                  "host": [
                    "gateway",
                    "marvel",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{publicKey}}"
                    },
                    {
                      "key": "ts",
                      "value": "{{ts}}"
                    },
                    {
                      "key": "hash",
                      "value": "{{hash}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "api_key",
                      "key": "key"
                    },
                    {
                      "type": "string",
                      "value": "a511e6d2d12e605782b9d48d738406e774f1b79b",
                      "key": "value"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "110b9590-8824-420d-91ac-d6b228043753",
                    "type": "text/javascript",
                    "exec": [
                      "// Gerar timestamp\r",
                      "const ts = new Date().getTime();\r",
                      "pm.environment.set(\"ts\", ts);\r",
                      "\r",
                      "// Pegar chaves pública e privada\r",
                      "const publicKey = pm.environment.get(\"publicKey\");\r",
                      "const privateKey = pm.environment.get(\"privateKey\");\r",
                      "\r",
                      "// Gerar hash\r",
                      "const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();\r",
                      "pm.environment.set(\"hash\", hash);\r",
                      ""
                    ],
                    "_lastExecutionId": "3fc2d6ad-4955-4272-8908-94e756ee17f8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a637b491-959d-4631-a027-d0bff4d505d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Successful GET request', function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                      "})\r",
                      "\r",
                      "pm.test('Body matches string 3-D', function () {\r",
                      "    pm.expect(pm.response.text()).to.include('3-D Man');\r",
                      "})\r",
                      "\r",
                      "pm.test('Response time is less than 300ms', function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.above(300);\r",
                      "})\r",
                      "\r",
                      "pm.test('Content-Type is present', function () {\r",
                      "    pm.response.to.have.header('Content-Type');\r",
                      "})\r",
                      "\r",
                      "pm.test('Content-Type is JSON', function () {\r",
                      "    pm.response.to.be.json;\r",
                      "})\r",
                      "\r",
                      "pm.test(\"response is ok\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let jsonResponse = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response should be a parsable JSON\", function() {\r",
                      "    pm.expect(jsonResponse).to.be.ok;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body should be an object\", function() {\r",
                      "    pm.expect(jsonResponse).to.be.an('object');\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "2ad28f8c-eb20-4bb4-94b3-ffe9f926dca8"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "",
                "key": "value"
              },
              {
                "type": "string",
                "value": "",
                "key": "key"
              },
              {
                "type": "string",
                "value": "query",
                "key": "in"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "687ce36f-85da-4bce-812e-92dc8ea996df",
                "type": "text/javascript",
                "exec": [
                  "// Gera timestamp",
                  "const ts = new Date().getTime();",
                  "pm.environment.set(\"ts\", ts);",
                  "",
                  "// Pega chaves pública e privada",
                  "const publicKey = pm.environment.get(\"publicKey\");",
                  "const privateKey = pm.environment.get(\"privateKey\");",
                  "",
                  "// Gera hash",
                  "const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();",
                  "pm.environment.set(\"hash\", hash);",
                  ""
                ],
                "_lastExecutionId": "40d1e250-2fa8-4c7a-af67-a14dedad3b65"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b7273c72-ffbd-42d5-9500-fce65b454254",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f94f2f5-7c96-45ff-a692-bcb3b448e6ed"
              }
            }
          ],
          "variable": [],
          "info": {
            "_postman_id": "bab5c654-685c-4c5e-b70c-df9f8f28c433",
            "name": "Marvel API Test",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ffa4c9c3-dce0-4dc5-9315-63e20dfb45da",
          "httpRequestId": "e6d8641e-3dab-48c9-b34f-3f5ec13ca4ed",
          "scriptId": "a637b491-959d-4631-a027-d0bff4d505d7",
          "execution": "2ad28f8c-eb20-4bb4-94b3-ffe9f926dca8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "response is ok",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:6:1)",
          "checksum": "c3d52c3f4ca6e1b7a85156faf2dffe38",
          "id": "93c9de10-9e10-4045-8fb6-51e817cec753",
          "timestamp": 1720203038850,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "040ed895-c349-42b8-ad63-55d9bf1ba05a",
          "name": "/v1/public/characters",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "v1",
                "public",
                "characters"
              ],
              "host": [
                "gateway",
                "marvel",
                "com"
              ],
              "query": [
                {
                  "key": "apikey",
                  "value": "{{publicKey}}"
                },
                {
                  "key": "ts",
                  "value": "{{ts}}"
                },
                {
                  "key": "hash",
                  "value": "{{hash}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "string",
                  "value": "header",
                  "key": "in"
                },
                {
                  "type": "string",
                  "value": "api_key",
                  "key": "key"
                },
                {
                  "type": "string",
                  "value": "a511e6d2d12e605782b9d48d738406e774f1b79b",
                  "key": "value"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "110b9590-8824-420d-91ac-d6b228043753",
                "type": "text/javascript",
                "exec": [
                  "// Gerar timestamp\r",
                  "const ts = new Date().getTime();\r",
                  "pm.environment.set(\"ts\", ts);\r",
                  "\r",
                  "// Pegar chaves pública e privada\r",
                  "const publicKey = pm.environment.get(\"publicKey\");\r",
                  "const privateKey = pm.environment.get(\"privateKey\");\r",
                  "\r",
                  "// Gerar hash\r",
                  "const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();\r",
                  "pm.environment.set(\"hash\", hash);\r",
                  ""
                ],
                "_lastExecutionId": "3fc2d6ad-4955-4272-8908-94e756ee17f8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a637b491-959d-4631-a027-d0bff4d505d7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Successful GET request', function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                  "})\r",
                  "\r",
                  "pm.test('Body matches string 3-D', function () {\r",
                  "    pm.expect(pm.response.text()).to.include('3-D Man');\r",
                  "})\r",
                  "\r",
                  "pm.test('Response time is less than 300ms', function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.above(300);\r",
                  "})\r",
                  "\r",
                  "pm.test('Content-Type is present', function () {\r",
                  "    pm.response.to.have.header('Content-Type');\r",
                  "})\r",
                  "\r",
                  "pm.test('Content-Type is JSON', function () {\r",
                  "    pm.response.to.be.json;\r",
                  "})\r",
                  "\r",
                  "pm.test(\"response is ok\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "let jsonResponse = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response should be a parsable JSON\", function() {\r",
                  "    pm.expect(jsonResponse).to.be.ok;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response body should be an object\", function() {\r",
                  "    pm.expect(jsonResponse).to.be.an('object');\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "2ad28f8c-eb20-4bb4-94b3-ffe9f926dca8"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "bab5c654-685c-4c5e-b70c-df9f8f28c433",
            "exporter_id": "17052005"
          },
          "item": [
            {
              "id": "040ed895-c349-42b8-ad63-55d9bf1ba05a",
              "name": "/v1/public/characters",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "v1",
                    "public",
                    "characters"
                  ],
                  "host": [
                    "gateway",
                    "marvel",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{publicKey}}"
                    },
                    {
                      "key": "ts",
                      "value": "{{ts}}"
                    },
                    {
                      "key": "hash",
                      "value": "{{hash}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "type": "string",
                      "value": "header",
                      "key": "in"
                    },
                    {
                      "type": "string",
                      "value": "api_key",
                      "key": "key"
                    },
                    {
                      "type": "string",
                      "value": "a511e6d2d12e605782b9d48d738406e774f1b79b",
                      "key": "value"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "110b9590-8824-420d-91ac-d6b228043753",
                    "type": "text/javascript",
                    "exec": [
                      "// Gerar timestamp\r",
                      "const ts = new Date().getTime();\r",
                      "pm.environment.set(\"ts\", ts);\r",
                      "\r",
                      "// Pegar chaves pública e privada\r",
                      "const publicKey = pm.environment.get(\"publicKey\");\r",
                      "const privateKey = pm.environment.get(\"privateKey\");\r",
                      "\r",
                      "// Gerar hash\r",
                      "const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();\r",
                      "pm.environment.set(\"hash\", hash);\r",
                      ""
                    ],
                    "_lastExecutionId": "3fc2d6ad-4955-4272-8908-94e756ee17f8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a637b491-959d-4631-a027-d0bff4d505d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Successful GET request', function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                      "})\r",
                      "\r",
                      "pm.test('Body matches string 3-D', function () {\r",
                      "    pm.expect(pm.response.text()).to.include('3-D Man');\r",
                      "})\r",
                      "\r",
                      "pm.test('Response time is less than 300ms', function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.above(300);\r",
                      "})\r",
                      "\r",
                      "pm.test('Content-Type is present', function () {\r",
                      "    pm.response.to.have.header('Content-Type');\r",
                      "})\r",
                      "\r",
                      "pm.test('Content-Type is JSON', function () {\r",
                      "    pm.response.to.be.json;\r",
                      "})\r",
                      "\r",
                      "pm.test(\"response is ok\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "let jsonResponse = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response should be a parsable JSON\", function() {\r",
                      "    pm.expect(jsonResponse).to.be.ok;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body should be an object\", function() {\r",
                      "    pm.expect(jsonResponse).to.be.an('object');\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "2ad28f8c-eb20-4bb4-94b3-ffe9f926dca8"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "string",
                "value": "",
                "key": "value"
              },
              {
                "type": "string",
                "value": "",
                "key": "key"
              },
              {
                "type": "string",
                "value": "query",
                "key": "in"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "687ce36f-85da-4bce-812e-92dc8ea996df",
                "type": "text/javascript",
                "exec": [
                  "// Gera timestamp",
                  "const ts = new Date().getTime();",
                  "pm.environment.set(\"ts\", ts);",
                  "",
                  "// Pega chaves pública e privada",
                  "const publicKey = pm.environment.get(\"publicKey\");",
                  "const privateKey = pm.environment.get(\"privateKey\");",
                  "",
                  "// Gera hash",
                  "const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();",
                  "pm.environment.set(\"hash\", hash);",
                  ""
                ],
                "_lastExecutionId": "40d1e250-2fa8-4c7a-af67-a14dedad3b65"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b7273c72-ffbd-42d5-9500-fce65b454254",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f94f2f5-7c96-45ff-a692-bcb3b448e6ed"
              }
            }
          ],
          "variable": [],
          "info": {
            "_postman_id": "bab5c654-685c-4c5e-b70c-df9f8f28c433",
            "name": "Marvel API Test",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ffa4c9c3-dce0-4dc5-9315-63e20dfb45da",
          "httpRequestId": "e6d8641e-3dab-48c9-b34f-3f5ec13ca4ed",
          "scriptId": "a637b491-959d-4631-a027-d0bff4d505d7",
          "execution": "2ad28f8c-eb20-4bb4-94b3-ffe9f926dca8"
        }
      }
    ],
    "error": null
  }
}