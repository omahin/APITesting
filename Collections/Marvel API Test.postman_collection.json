{
	"info": {
		"_postman_id": "bab5c654-685c-4c5e-b70c-df9f8f28c433",
		"name": "Marvel API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17052005"
	},
	"item": [
		{
			"name": "/v1/public/characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gerar timestamp\r",
							"const ts = new Date().getTime();\r",
							"pm.environment.set(\"ts\", ts);\r",
							"\r",
							"// Pegar chaves pública e privada\r",
							"const publicKey = pm.environment.get(\"publicKey\");\r",
							"const privateKey = pm.environment.get(\"privateKey\");\r",
							"\r",
							"// Gerar hash\r",
							"const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();\r",
							"pm.environment.set(\"hash\", hash);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Successful GET request', function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							"pm.test('Response time is less than 300ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type is present', function () {\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test('Content-Type is JSON', function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonResponse = pm.response.json();\r",
							"\r",
							"pm.test(\"Response should be a parsable JSON\", function() {\r",
							"    pm.expect(jsonResponse).to.be.ok;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be an object\", function() {\r",
							"    pm.expect(jsonResponse).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json().data;\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.results).to.be.an('array');\r",
							"    \r",
							"    responseData.results.forEach(result => {\r",
							"        pm.expect(result.id).to.exist;\r",
							"        pm.expect(result.name).to.exist;\r",
							"        pm.expect(result.description).to.exist;\r",
							"        pm.expect(result.modified).to.exist;\r",
							"        pm.expect(result.thumbnail).to.exist;\r",
							"        pm.expect(result.resourceURI).to.exist;\r",
							"        pm.expect(result.comics).to.exist;\r",
							"        pm.expect(result.series).to.exist;\r",
							"        pm.expect(result.stories).to.exist;\r",
							"        pm.expect(result.events).to.exist;\r",
							"        pm.expect(result.urls).to.exist;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Thumbnail path is a non-empty string and has a valid extension\", function () {\r",
							"    const responseData = pm.response.json().data;\r",
							"    \r",
							"    pm.expect(responseData.results).to.be.an('array');\r",
							"    responseData.results.forEach(function(result) {\r",
							"        pm.expect(result.thumbnail.path).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Thumbnail path should not be empty\");\r",
							"        pm.expect(result.thumbnail.extension).to.be.a('string').and.to.match(/^(jpg|jpeg|png|gif)$/i, \"Thumbnail extension should be valid\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api_key",
							"type": "string"
						},
						{
							"key": "value",
							"value": "a511e6d2d12e605782b9d48d738406e774f1b79b",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gateway.marvel.com/v1/public/characters?apikey={{publicKey}}&ts={{ts}}&hash={{hash}}",
					"protocol": "https",
					"host": [
						"gateway",
						"marvel",
						"com"
					],
					"path": [
						"v1",
						"public",
						"characters"
					],
					"query": [
						{
							"key": "apikey",
							"value": "{{publicKey}}"
						},
						{
							"key": "ts",
							"value": "{{ts}}"
						},
						{
							"key": "hash",
							"value": "{{hash}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "",
				"type": "string"
			},
			{
				"key": "key",
				"value": "",
				"type": "string"
			},
			{
				"key": "in",
				"value": "query",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Gera timestamp",
					"const ts = new Date().getTime();",
					"pm.environment.set(\"ts\", ts);",
					"",
					"// Pega chaves pública e privada",
					"const publicKey = pm.environment.get(\"publicKey\");",
					"const privateKey = pm.environment.get(\"privateKey\");",
					"",
					"// Gera hash",
					"const hash = CryptoJS.MD5(ts + privateKey + publicKey).toString();",
					"pm.environment.set(\"hash\", hash);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}